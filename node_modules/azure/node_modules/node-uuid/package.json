{
  "name": "node-uuid",
  "description": "Simple, fast generation of RFC4122 (v1 and v4) UUIDs.",
  "url": "http://github.com/broofa/node-uuid",
  "keywords": [
    "uuid",
    "guid",
    "rfc4122"
  ],
  "author": {
    "name": "Robert Kieffer",
    "email": "robert@broofa.com"
  },
  "contributors": [
    {
      "name": "Christoph Tavan",
      "email": "dev@tavan.de"
    }
  ],
  "dependencies": {},
  "lib": ".",
  "main": "./uuid.js",
  "version": "1.2.0",
  "readme": "# node-uuid\n\nSimple, fast generation of [RFC4122 (v1 and v4)](http://www.ietf.org/rfc/rfc4122.txt) UUIDS.  It runs in node.js and all major browsers.\n\n## Installation\n\n    npm install node-uuid\n\n### In browser\n\n```html\n<script src=\"uuid.js\"></script>\n```\n\n### In node.js\n\n```javascript\nvar uuid = require('node-uuid');\nuuid.v1(); // -> v1 uuid\nuuid.v4(); // -> v4 uuid\n\n// ... or if you just need to generate uuids of one type and don't need helpers ...\nvar uuid = require('node-uuid').v1;\nuuid(); // -> v1 uuid\n\n// ... or ...\nvar uuid = require('node-uuid').v4;\nuuid(); // -> v4 uuid\n```\n\n## Usage\n\n### Generate a String UUID\n\n```javascript\nvar id = uuid.v4([options, [buffer, [offset]]]); // -> '92329d39-6f5c-4520-abfc-aab64544e172'\n```\n\n### Generate a Binary UUID\n\n```javascript\n// Simple form - allocates a Buffer/Array for you\nvar buffer = uuid.v4('binary');\n// node.js -> <Buffer 08 50 05 c8 9c b2 4c 07 ac 07 d1 4f b9 f5 04 51>\n// browser -> [8, 80, 5, 200, 156, 178, 76, 7, 172, 7, 209, 79, 185, 245, 4, 81]\n\n// Provide your own Buffer or Array\nvar buffer = new Array(16);\nuuid.v4('binary', buffer); // -> [8, 80, 5, 200, 156, 178, 76, 7, 172, 7, 209, 79, 185, 245, 4, 81]\nvar buffer = new Buffer(16);\nuuid.v4('binary', buffer); // -> <Buffer 08 50 05 c8 9c b2 4c 07 ac 07 d1 4f b9 f5 04 51>\n\n// Let node-uuid decide whether to use Buffer or Array\nvar buffer = new uuid.BufferClass(16);\nuuid.v4('binary', buffer); // -> see above, depending on the environment\n\n// Provide your own Buffer/Array, plus specify offset\n// (e.g. here we fill an array with 3 uuids)\nvar buffer = new Buffer(16 * 3);\nuuid.v4('binary', buffer, 0);\nuuid.v4('binary', buffer, 16);\nuuid.v4('binary', buffer, 32);\n```\n\n### Options\n\nThere are several options that can be passed to `v1()` and `v4()`:\n\n```javascript\nvar options = {\n  format: (String),    // (v1/v4) 'binary' or 'string'\n  random: (Array),     // (v1/v4) array of four 32bit random #'s to use instead of rnds\n  time: (Number),      // (v1) timestamp to use (in UNIX epoch, in msec)\n  timesubms: (Number), // (v1) number of 100ns intervals since msec time\n  clockseq: (Number),  // (v1) clockseq to use\n  node: (Array)        // (v1) node. Array of hexoctets, e.g. a MAC-address\n};\n```\n\nIf `options` is a string it is interpreted as the `format` option.\n\nUsing the `options` parameter you can get the UUIDs that would sort first and last for a given millisecond timestamp.\nThis is useful whenever you need to find UUIDs that have been generated during a certain timespan.\n\n```javascript\nvar now = new Date().getTime();\nvar first = uuid.v1({\n  time: now,\n  timesubms: 0,\n  clockseq: 0,\n  node: [0, 0, 0, 0, 0, 0]\n});\nvar last = uuid.v1({\n  time: now,\n  timesubms: 9999,\n  clockseq: 0x3fff, // 14bit\n  node: [0xff, 0xff, 0xff, 0xff, 0xff, 0xff]\n});\n// first: 038ee0a0-11df-11e1-8000-000000000000\n// last:  038f07af-11df-11e1-bfff-ffffffffffff\n```\n\n### Helpers\n\nnode-uuid provides helper-functions for converting UUIDs between buffer/array and string representations:\n\n```javascript\nvar binary = uuid.parse('797ff043-11eb-11e1-80d6-510998755d10');\n// -> <Buffer 79 7f f0 43 11 eb 11 e1 80 d6 51 09 98 75 5d 10>\nvar string = uuid.unparse(binary);\n// -> '797ff043-11eb-11e1-80d6-510998755d10'\n```\n\n\n## Testing\n\ntest/test.js generates performance data (similar to test/benchmark.js). It also verifies the syntax of 100K string UUIDs, and logs the distribution of hex digits found therein.  For example:\n\n    - - - Performance Data - - -\n    uuid.v4(): 1470588 uuids/second\n    uuid.v4('binary'): 1041666 uuids/second\n    uuid.v4('binary', buffer): 3125000 uuids/second\n    uuid.v1(): 869565 uuids/second\n    uuid.v1('binary'): 625000 uuids/second\n    uuid.v1('binary', buffer): 1123595 uuids/second\n\n    - - - Distribution of Hex Digits (% deviation from ideal) - - -\n    0 |================================| 187378 (-0.07%)\n    1 |================================| 186972 (-0.28%)\n    2 |================================| 187274 (-0.12%)\n    3 |================================| 187392 (-0.06%)\n    4 |==================================================| 286998 (-0.17%)\n    5 |================================| 187525 (0.01%)\n    6 |================================| 188019 (0.28%)\n    7 |================================| 187541 (0.02%)\n    8 |=====================================| 212941 (0.21%)\n    9 |====================================| 212308 (-0.09%)\n    a |====================================| 211923 (-0.27%)\n    b |=====================================| 212605 (0.05%)\n    c |================================| 187608 (0.06%)\n    d |================================| 188473 (0.52%)\n    e |================================| 187547 (0.03%)\n    f |================================| 187496 (0%)\n\nNote that the increased values for 4 and 8-B are expected as part of the RFC4122 syntax (and are accounted for in the deviation calculation). BTW, if someone wants to do the calculation to determine what a statistically significant deviation would be, I'll gladly add that to the test.\n\n### In browser\n\nOpen test/test.html\n\n### In node.js\n\n    node test/test.js\n\nnode.js users can also run the node-uuid vs. uuid vs. uuid-js benchmark:\n\n    npm install uuid uuid-js\n    node test/benchmark.js\n\n## Performance\n\n### In node.js\n\nnode-uuid is designed to be fast.  That said, the target platform is node.js, where it is screaming fast.  Here's what I get on an Intel Core i7 950 @ 3.07GHz for the test/benchmark.js script:\n\n    # v4\n    nodeuuid.v4(): 1577287 uuids/second\n    nodeuuid.v4('binary'): 1033057 uuids/second\n    nodeuuid.v4('binary', buffer): 3012048 uuids/second\n    uuid(): 266808 uuids/second\n    uuid('binary'): 302480 uuids/second\n    uuidjs.create(4): 360750 uuids/second\n    # v1\n    nodeuuid.v1(): 905797 uuids/second\n    nodeuuid.v1('binary'): 557413 uuids/second\n    nodeuuid.v1('binary', buffer): 1240694 uuids/second\n    uuidjs.create(1): 201369 uuids/second\n\nThe uuid() entries are for Nikhil Marathe's [uuid module](https://bitbucket.org/nikhilm/uuidjs), the uuidjs() entries are for Patrick Negri's [uuid-js module](https://github.com/pnegri/uuid-js), and they are provided for comparison. uuid is a wrapper around the native libuuid library, uuid-js is a pure javascript implementation based on [UUID.js](https://github.com/LiosK/UUID.js) by LiosK.\n\n### In browser\n\nnode-uuid performance varies dramatically across browsers.  For comprehensive test results, please [checkout the JSPerf tests](http://jsperf.com/node-uuid-performance).\n",
  "readmeFilename": "README.md",
  "_id": "node-uuid@1.2.0",
  "dist": {
    "shasum": "53ebf7f8eec6ce1a12795cb35e6b208cacdadabf"
  },
  "_from": "node-uuid@> = 1.2.0",
  "_resolved": "https://registry.npmjs.org/node-uuid/-/node-uuid-1.2.0.tgz"
}
